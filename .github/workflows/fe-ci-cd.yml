name: Dongarium FE CI/CD

on:
  pull_request:
    branches: ['develop']
  push:
    branches: ['main']

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Restore node modules from cache
        id: restore-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node

      - name: Install dependencies
        if: steps.restore-node-modules.outputs.cache-hit != 'true'
        run: npm install

  lint:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Restore node modules from cache
        id: restore-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies (if not cached)
        if: steps.restore-node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Run lint
        run: npm run lint

  type-check:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '22'
      - name: Restore node modules from cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm install
      - name: TypeScript type check
        run: npx tsc --noEmit

  build:
    runs-on: ubuntu-latest
    needs: [install-dependencies, lint]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Restore node modules from cache
        id: restore-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies (if not cached)
        if: steps.restore-node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Run Build
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
        run: npm run build

      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: react-dist
          path: ./dist

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: dongarium
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: react-dist
          path: ./dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Deploy to S3 and invalidate CloudFront
        run: |
          aws s3 sync ./dist s3://${{ secrets.S3_BUCKET }} --delete --acl public-read
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
